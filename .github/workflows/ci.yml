name: Python application

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  unit_tests:
    runs-on: ubuntu-latest
    name: Unit tests
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry --version
      - name: Install dependencies
        run: |
          poetry install --no-interaction --all-groups
      - name: Run tests
        run: |
          poetry run coverage run -m pytest test/vaultscan/unit
          echo "Code coverage report:"
          poetry run coverage report
  semver:
    runs-on: ubuntu-latest
    name: Versioning
    needs: [unit_tests]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        ref: ${{ github.head_ref }}
        fetch-depth: 0
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"
    - name: Install Poetry
      run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry --version
    - name: Install python-semantic-release
      run: |
        pip install python-semantic-release
    - name: Run Semantic Release (Versioning Only)
      run: |
        echo "ðŸ”¹Generating a new package version using semver"
        semantic-release version --no-tag --no-vcs-release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Inject new version on Poetry
      run: |
        echo "ðŸ”¹The semver generated a new version and now we use poetry version to inject the new version on the pyproject.toml file. It would be used by poetry install and poetry build"
        PACKAGE_VERSION=$(python -c "from vaultscan import __version__; print(__version__)")
        poetry version $PACKAGE_VERSION
        cat pyproject.toml
    - name: Build package
      run: |
          poetry install --no-interaction
          poetry build
          ls ./dist/
    - name: Creating release version
      run: |
        echo "ðŸ”¹Creating a GitHub release with the package files generated by Poetrys"
        semantic-release publish
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  release:
    runs-on: ubuntu-latest
    name: Create release and upload artifacts
    if: github.event_name == 'push'  # just when merge to main
    needs: [unit_tests, semver]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry --version
      - name: Get version from pyproject.toml
        run: |
          echo "VERSION=$(poetry version -s)" >> $GITHUB_ENV
      - name: Build package
        run: |
          poetry install --no-interaction
          poetry build
      - name: Create GitHub Release Version
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: ${{ env.VERSION }}
          body: "Automated release for version ${{ env.VERSION }}"
          files: |
            dist/*.tar.gz
            dist/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create GitHub Latest Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: latest
          name: latest
          body: "Automated release for the latest version"
          files: |
            dist/*.tar.gz
            dist/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
